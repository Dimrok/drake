import drake
import sys

def configure(prefix = '.'):

  prefix = drake.Path(prefix)

  sources = drake.nodes(
    'src/drake/__init__.py',
    'src/drake/cxx/__init__.py',
    'src/drake/cxx/bison.py',
    'src/drake/cxx/boost.py',
    'src/drake/cxx/flex.py',
    'src/drake/cxx/opengl.py',
    'src/drake/cxx/qt.py',
    'src/drake/cxx/sdl.py',
    'src/drake/debug.py',
    'src/drake/git.py',
    'src/drake/python/__init__.py',
    'src/drake/sched.py',
    'src/drake/utils.py',
    )

  lib = drake.Path('usr/lib/python%s.%s/site-packages' % \
                     (sys.version_info.major, sys.version_info.minor))
  python = drake.copy(sources, prefix / lib, 'src')

  install = drake.Rule('install', python)

  tests = [
    'base/no-builder-to-make',
    'sched/thread-concurrency',
    ]

  class Tester(drake.Builder):

    def __init__(self, name):
      self.__name = name
      path = drake.Path('tests') / drake.Path(name)
      self.__exe = drake.node(path / 'test')
      path.extension = 'tst'
      self.__target = drake.node(path)
      drake.Builder.__init__(self, [self.__exe] + sources, [self.__target])

    def execute(self):
      res = self.cmd('Test %s' % self.__name,
                     str(self.__exe.path()))
      if res:
        self.__target.path().touch()
      return res

    def target(self):
      return self.__target

  check = drake.Rule('check')
  for test in tests:
    check << Tester(test).target()
