#!/usr/bin/env python3

'''Check that removing and then changing a dynamic dependency results in the
   new dependency being built.'''

import drake
import os
import shutil
import tempfile
import threading
import time

class TestDrake:

  def __init__(self, working_dir):
    self.__working_dir = working_dir
    super().__init__()

  def __enter__(self):
    os.chdir(self.__working_dir)
    self.__drake = drake.Drake()
    self.__drake.__enter__()
    return self.__drake

  def __exit__(self, *args):
    self.__drake.__exit__(*args)


class BlockBuilder(drake.TouchBuilder):

  def __init__(self, targets):
    super().__init__(targets)
    self.sem = threading.Semaphore(0)

  def execute(self):
    def job():
      self.sem.acquire()
      return drake.TouchBuilder.execute(self)
    return self._run_job(job)


class DependantBuilder(drake.TouchBuilder):

  def deps_handler(builder, path, t, data):
    return drake.node(path, t)

  deps = 'some.identifier'

  drake.Builder.register_deps_handler(deps, deps_handler)

  def __init__(self, dsts, deps):
    self.__deps = deps
    super().__init__(dsts)

  def dependencies(self):
    for dep in self.__deps:
      self.add_dynsrc(self.deps, dep)

with tempfile.TemporaryDirectory() as working_dir:
  with TestDrake(working_dir) as d:
    dyn1 = drake.node('dyn1')
    drake.TouchBuilder([dyn1])
    dyn2 = drake.node('dyn2')
    drake.TouchBuilder([dyn2])
    target = drake.node('target')
    DependantBuilder([target], [dyn1, dyn2])
    drake.sched.Coroutine(target.build, str(target), d.scheduler)
    d.scheduler.run()
  os.remove('%s/target' % working_dir)
  os.remove('%s/dyn1' % working_dir)
  os.remove('%s/dyn2' % working_dir)
  with TestDrake(working_dir) as d:
    d.jobs_set(3)
    dyn1 = drake.node('dyn1')
    block = BlockBuilder([dyn1])
    dyn2 = drake.node('dyn2')
    class FailBuilder(drake.Builder):
      def execute(self):
        block.sem.release()
        return False
    fail = FailBuilder([], [dyn2])
    target = drake.node('target')
    DependantBuilder([target], [dyn1, dyn2])
    drake.sched.Coroutine(target.build, str(target), d.scheduler)
    try:
      d.scheduler.run()
    except drake.Builder.Failed as e:
      assert e.builder == fail
    else:
      assert False
    assert os.path.exists('dyn1')
